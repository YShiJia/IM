// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.4
// source: apps/status/rpc/status.proto

package statusmodel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Status_Ping_FullMethodName              = "/status.Status/Ping"
	Status_UserOnline_FullMethodName        = "/status.Status/UserOnline"
	Status_ClientConnAddress_FullMethodName = "/status.Status/ClientConnAddress"
	Status_ClientMsgSync_FullMethodName     = "/status.Status/ClientMsgSync"
)

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UserOnline(ctx context.Context, in *UserOnlineRequest, opts ...grpc.CallOption) (*UserOnlineResponse, error)
	ClientConnAddress(ctx context.Context, in *ClientConnAddressRequest, opts ...grpc.CallOption) (*ClientConnAddressResponse, error)
	ClientMsgSync(ctx context.Context, in *ClientMsgSyncRequest, opts ...grpc.CallOption) (*ClientMsgSyncResponse, error)
}

type statusClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusClient(cc grpc.ClientConnInterface) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Status_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) UserOnline(ctx context.Context, in *UserOnlineRequest, opts ...grpc.CallOption) (*UserOnlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOnlineResponse)
	err := c.cc.Invoke(ctx, Status_UserOnline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) ClientConnAddress(ctx context.Context, in *ClientConnAddressRequest, opts ...grpc.CallOption) (*ClientConnAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientConnAddressResponse)
	err := c.cc.Invoke(ctx, Status_ClientConnAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) ClientMsgSync(ctx context.Context, in *ClientMsgSyncRequest, opts ...grpc.CallOption) (*ClientMsgSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientMsgSyncResponse)
	err := c.cc.Invoke(ctx, Status_ClientMsgSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
// All implementations must embed UnimplementedStatusServer
// for forward compatibility
type StatusServer interface {
	Ping(context.Context, *Request) (*Response, error)
	UserOnline(context.Context, *UserOnlineRequest) (*UserOnlineResponse, error)
	ClientConnAddress(context.Context, *ClientConnAddressRequest) (*ClientConnAddressResponse, error)
	ClientMsgSync(context.Context, *ClientMsgSyncRequest) (*ClientMsgSyncResponse, error)
	mustEmbedUnimplementedStatusServer()
}

// UnimplementedStatusServer must be embedded to have forward compatible implementations.
type UnimplementedStatusServer struct {
}

func (UnimplementedStatusServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStatusServer) UserOnline(context.Context, *UserOnlineRequest) (*UserOnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOnline not implemented")
}
func (UnimplementedStatusServer) ClientConnAddress(context.Context, *ClientConnAddressRequest) (*ClientConnAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientConnAddress not implemented")
}
func (UnimplementedStatusServer) ClientMsgSync(context.Context, *ClientMsgSyncRequest) (*ClientMsgSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientMsgSync not implemented")
}
func (UnimplementedStatusServer) mustEmbedUnimplementedStatusServer() {}

// UnsafeStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServer will
// result in compilation errors.
type UnsafeStatusServer interface {
	mustEmbedUnimplementedStatusServer()
}

func RegisterStatusServer(s grpc.ServiceRegistrar, srv StatusServer) {
	s.RegisterService(&Status_ServiceDesc, srv)
}

func _Status_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Status_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_UserOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).UserOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Status_UserOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).UserOnline(ctx, req.(*UserOnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_ClientConnAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConnAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ClientConnAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Status_ClientConnAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ClientConnAddress(ctx, req.(*ClientConnAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_ClientMsgSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMsgSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).ClientMsgSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Status_ClientMsgSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).ClientMsgSync(ctx, req.(*ClientMsgSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Status_ServiceDesc is the grpc.ServiceDesc for Status service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Status_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "status.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Status_Ping_Handler,
		},
		{
			MethodName: "UserOnline",
			Handler:    _Status_UserOnline_Handler,
		},
		{
			MethodName: "ClientConnAddress",
			Handler:    _Status_ClientConnAddress_Handler,
		},
		{
			MethodName: "ClientMsgSync",
			Handler:    _Status_ClientMsgSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/status/rpc/status.proto",
}
